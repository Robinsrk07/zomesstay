// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

/* ===================== Enums ===================== */

enum UserStatus {
  active
  blocked
}

enum PropertyStatus {
  active 
  blocked
}

enum RoomTypeStatus {
  active
  inactive
}

enum RoomStatus {
  active
  maintenance
  inactive
}

enum BookingStatus {
  pending
  confirmed
  cancelled
  completed
}

enum PromotionStatus {
  active
  inactive
}

enum PromotionType {
  percent
  flat
}

/* ===================== People ===================== */

model Admin {
  id            String   @id @default(uuid()) @db.Char(36)
  email         String   @unique
  firstName     String
  lastName      String
  password      String
  status        String   @default("ACTIVE") // optional: convert to enum later
  phone         String?
  profileImage  String?
  emailVerified DateTime?
  phoneVerified DateTime?
  dob           DateTime?
  gender        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isDeleted     Boolean  @default(false)

  @@index([isDeleted])
}

model Host {
  id            String   @id @default(uuid()) @db.Char(36)
  email         String   @unique
  password      String
  firstName     String?
  lastName      String?
  phone         String?
  profileImage  String?
  isVerified    Boolean  @default(false)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isDeleted     Boolean  @default(false)

  properties    Property[]

  @@index([isDeleted])
}

model User {
  id            String      @id @default(uuid()) @db.Char(36)
  status        UserStatus  @default(active)
  email         String      @unique
  phone         String?     @unique
  username      String?     @unique
  password      String
  firstname     String?
  lastname      String?
  profileImage  String?
  emailVerified Boolean     @default(false)
  phoneVerified Boolean     @default(false)
  dob           DateTime?
  gender        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isDeleted     Boolean     @default(false)

  bookings      Booking[]
  payments      Payment[]
  reviews       Review[]
  wishlist      Wishlist?

  @@index([isDeleted])
}

/* ===================== Vocabularies ===================== */

model Amenity {
  id        String   @id @default(uuid()) @db.Char(36)
  name      String
  icon      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  propertyLinks PropertyAmenity[]
  roomTypeLinks RoomTypeAmenity[]
  roomLinks     RoomAmenity[]

  @@unique([name, isDeleted])
  @@index([isDeleted])
}

model Facility {
  id        String   @id @default(uuid()) @db.Char(36)
  name      String
  icon      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  propertyLinks PropertyFacility[]

  @@unique([name, isDeleted])
  @@index([isDeleted])
}

model SafetyHygiene {
  id        String   @id @default(uuid()) @db.Char(36)
  name      String
  icon      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  propertyLinks PropertySafety[]

  @@unique([name, isDeleted])
  @@index([isDeleted])
}

model PropertyType {
  id        String   @id @default(uuid()) @db.Char(36)
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  properties Property[]

  @@unique([name, isDeleted])
  @@index([isDeleted])
}

/* ===================== Properties / RoomTypes / Rooms ===================== */

model Property {
  id               String         @id @default(uuid()) @db.Char(36)
  title            String         @unique   // <- globally unique, regardless of host or isDeleted
  description      String?
  rulesAndPolicies String?
  status           PropertyStatus @default(active)
  location         Json?
  avgRating        Decimal?       @db.Decimal(3, 2)
  reviewCount      Int            @default(0)
  coverImage       String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  isDeleted        Boolean        @default(false)

  ownerHostId      String         @db.Char(36)
  ownerHost        Host           @relation(fields: [ownerHostId], references: [id])

  propertyTypeId   String?        @db.Char(36)
  propertyType     PropertyType?  @relation(fields: [propertyTypeId], references: [id])

  media            PropertyMedia[]
  roomTypes        RoomType[]
  rooms            Room[]
  bookings         Booking[]
  payments         Payment[]
  reviews          Review[]
  promotions       Promotion[]
  wishlistItems    WishlistItem[]
  amenities        PropertyAmenity[]
  facilities       PropertyFacility[]
  safeties         PropertySafety[]

  @@index([ownerHostId])
  @@index([propertyTypeId])
  @@index([isDeleted])
}



model PropertyMedia {
  id         String   @id @default(uuid()) @db.Char(36)
  url        String
  type       String   // 'image' | 'video'
  isFeatured Boolean  @default(false)
  order      Int      @default(0)
  propertyId String   @db.Char(36)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)

  @@index([propertyId])
  @@index([isDeleted])
}

// GLOBAL room type catalog (shared by all properties)
model RoomType {
  id        String          @id @default(uuid()) @db.Char(36)
  name      String
  status    RoomTypeStatus  @default(active)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  isDeleted Boolean         @default(false)

  properties Property[]
  rooms      Room[]
  amenities  RoomTypeAmenity[]

  @@unique([name, isDeleted])
  @@index([isDeleted])
}

model Room {
  id            String       @id @default(uuid()) @db.Char(36)
  propertyId    String       @db.Char(36)
  roomTypeId    String       @db.Char(36)
  name          String
  code          String?
  spaceSqft     Int?
  maxOccupancy  Int
  price         Decimal      @db.Decimal(10, 2)
  images        Json?
  status        RoomStatus   @default(active)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  isDeleted     Boolean      @default(false)

  property      Property     @relation(fields: [propertyId], references: [id])
  roomType      RoomType     @relation(fields: [roomTypeId], references: [id])

  availability  Availability[]
  bookings      Booking[]
  amenities     RoomAmenity[]

  @@index([propertyId])
  @@index([roomTypeId])
  @@index([isDeleted])
}

model Availability {
  id          String    @id @default(uuid()) @db.Char(36)
  roomId      String    @db.Char(36)
  date        DateTime
  isAvailable Boolean   @default(true)
  price       Decimal?  @db.Decimal(10, 2)
  minNights   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)

  room        Room      @relation(fields: [roomId], references: [id])

  @@unique([roomId, date, isDeleted]) // allows re-creating same date after soft delete
  @@index([roomId])
  @@index([isDeleted])
}

/* ===================== Bookings / Payments / Reviews ===================== */

model Booking {
  id         String        @id @default(uuid()) @db.Char(36)
  userId     String        @db.Char(36)
  propertyId String        @db.Char(36)
  roomId     String        @db.Char(36)
  startDate  DateTime
  endDate    DateTime
  subtotal   Decimal       @db.Decimal(10, 2)
  taxes      Decimal       @db.Decimal(10, 2)
  discount   Decimal       @db.Decimal(10, 2)
  total      Decimal       @db.Decimal(10, 2)
  status     BookingStatus @default(pending)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  isDeleted  Boolean       @default(false)

  promoId    String?       @db.Char(36)
  promo      Promotion?    @relation(fields: [promoId], references: [id])

  user       User          @relation(fields: [userId], references: [id])
  property   Property      @relation(fields: [propertyId], references: [id])
  room       Room          @relation(fields: [roomId], references: [id])

  payments   Payment[]

  @@index([userId])
  @@index([propertyId])
  @@index([roomId])
  @@index([isDeleted])
}

model Payment {
  id            String   @id @default(uuid()) @db.Char(36)
  transactionID String   @unique
  customerId    String   @db.Char(36)
  propertyId    String   @db.Char(36)
  amount        Decimal  @db.Decimal(10, 2)
  paymentMethod String
  status        String
  date          DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isDeleted     Boolean  @default(false)

  bookingId     String?  @db.Char(36)
  booking       Booking? @relation(fields: [bookingId], references: [id])

  customer      User     @relation(fields: [customerId], references: [id])
  property      Property @relation(fields: [propertyId], references: [id])

  @@index([customerId])
  @@index([propertyId])
  @@index([bookingId])
  @@index([isDeleted])
}

model Review {
  id          String   @id @default(uuid()) @db.Char(36)
  userId      String   @db.Char(36)
  propertyId  String   @db.Char(36)
  description String?
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  user        User     @relation(fields: [userId], references: [id])
  property    Property @relation(fields: [propertyId], references: [id])

  // Choose policy: allow re-review after soft delete
  @@unique([userId, propertyId, isDeleted])
  @@index([propertyId])
  @@index([isDeleted])
}

/* ===================== Wishlist / Promotions ===================== */

model Wishlist {
  id        String   @id @default(uuid()) @db.Char(36)
  userId    String   @unique @db.Char(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  user      User     @relation(fields: [userId], references: [id])
  items     WishlistItem[]

  @@index([isDeleted])
}

model WishlistItem {
  id         String   @id @default(uuid()) @db.Char(36)
  wishlistId String   @db.Char(36)
  propertyId String   @db.Char(36)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)

  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])

  @@unique([wishlistId, propertyId, isDeleted])
  @@index([propertyId])
  @@index([isDeleted])
}

model Promotion {
  id         String          @id @default(uuid()) @db.Char(36)
  propertyId String          @db.Char(36)
  discount   Decimal         @db.Decimal(10, 2)
  validFrom  DateTime
  validTo    DateTime
  status     PromotionStatus @default(active)
  type       PromotionType
  code       String          @unique
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  isDeleted  Boolean         @default(false)

  property   Property        @relation(fields: [propertyId], references: [id])
  bookings   Booking[]

  @@index([propertyId])
  @@index([isDeleted])
}

/* ===================== Join Tables (M:N) ===================== */

model PropertyAmenity {
  id         String   @id @default(uuid()) @db.Char(36)
  propertyId String   @db.Char(36)
  amenityId  String   @db.Char(36)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)

  property   Property @relation(fields: [propertyId], references: [id])
  amenity    Amenity  @relation(fields: [amenityId], references: [id])

  @@unique([propertyId, amenityId, isDeleted])
  @@index([amenityId])
  @@index([isDeleted])
}

model PropertyFacility {
  id         String   @id @default(uuid()) @db.Char(36)
  propertyId String   @db.Char(36)
  facilityId String   @db.Char(36)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)

  property   Property @relation(fields: [propertyId], references: [id])
  facility   Facility @relation(fields: [facilityId], references: [id])

  @@unique([propertyId, facilityId, isDeleted])
  @@index([facilityId])
  @@index([isDeleted])
}

model PropertySafety {
  id         String        @id @default(uuid()) @db.Char(36)
  propertyId String        @db.Char(36)
  safetyId   String        @db.Char(36)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  isDeleted  Boolean       @default(false)

  property   Property      @relation(fields: [propertyId], references: [id])
  safety     SafetyHygiene @relation(fields: [safetyId], references: [id])

  @@unique([propertyId, safetyId, isDeleted])
  @@index([safetyId])
  @@index([isDeleted])
}

model RoomTypeAmenity {
  id         String   @id @default(uuid()) @db.Char(36)
  roomTypeId String   @db.Char(36)
  amenityId  String   @db.Char(36)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)

  roomType   RoomType @relation(fields: [roomTypeId], references: [id])
  amenity    Amenity  @relation(fields: [amenityId], references: [id])

  @@unique([roomTypeId, amenityId, isDeleted])
  @@index([amenityId])
  @@index([isDeleted])
}

model RoomAmenity {
  id        String   @id @default(uuid()) @db.Char(36)
  roomId    String   @db.Char(36)
  amenityId String   @db.Char(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  room      Room     @relation(fields: [roomId], references: [id])
  amenity   Amenity  @relation(fields: [amenityId], references: [id])

  @@unique([roomId, amenityId, isDeleted])
  @@index([amenityId])
  @@index([isDeleted])
}
